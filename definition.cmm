#include "definition.hmm"
#include <string.hmm>
#include <stdio.hmm>
#include <stdlib.hmm>
#include <ctype.hmm>

#define TABLESIZE 20     //マクロ登録テーブルの大きさ
#define DEFSIZE 50       //定義本体のサイズ

int depth=0;             //マクロの登録の深さ



public char[] replacedef(char[] macro,char[][] arg){
  int n=0;          //マクロ名のあった深さ
  char[] retbuf=malloc(sizeof(char)*DEFSIZE);  //置換後のバッファ
  n=searchdef(macro);       //マクロ名の探索


  //マクロ名の引数数が0なら
  if(deftable[n].narg==0){
    retbuf=strCpy(retbuf,deftable[n].mdefinition);
    return retbuf;
  }

  //マクロ名の引数数が0でないなら
  else{

    int i=0;
    //引数の数があっているか確認
    for(i=0;i<deftable[n].narg;i=i+1){
      if(arg[i]==null)
        //引数が足りないエラー
        return null;
    }

    reflist sublist=deftable[n].pattern;   //臨時のリストに格納
    int wordn=-1;          //単語の出現番号
    int bufn=0;           //置換後バッファの文字位置
    int defn=0;           //定義本体の文字位置
    boolean sharp1=false; //'#'を見つけた時用フラグ
    boolean sharp2=false; //'#'を連続で見つけた時用フラグ


    while(deftable[n].mdefinition[defn]!='\0'){
      if(isAlnum(deftable[n].mdefinition[defn]) || deftable[n].mdefinition[defn]=='.'){
        wordn=wordn+1;
        if(wordn==sublist.nchar){
          while(isAlnum(deftable[n].mdefinition[defn]) || deftable[n].mdefinition[defn]=='.'){
            defn=defn+1;
          }

          //引数で置換
          if(sharp1){
            retbuf[bufn]='\"';
            bufn=bufn+1;
          }

          for(i=0;i<strLen(arg[sublist.argn]);i=i+1){
            retbuf[bufn]=arg[sublist.argn][i];
            bufn=bufn+1;
          }

          if(sharp1){
            retbuf[bufn]='\"';
            bufn=bufn+1;
          }
          sharp1=false;
          sharp2=false;
          if(sublist.next!=null)
            sublist=sublist.next;
        }
        else{
          while(isAlnum(deftable[n].mdefinition[defn]) || deftable[n].mdefinition[defn]=='.'){
            retbuf[bufn]=deftable[n].mdefinition[defn];
            defn=defn+1;
            bufn=bufn+1;
          }
        }
      }
      else{
        wordn=wordn+1;
        if(deftable[n].mdefinition[defn]=='#'){
          if(sharp2){
            retbuf[bufn]='#';
            bufn=bufn+1;
          }
          else if(sharp1){
            sharp2=true;
            sharp1=false;
          }
          else{
            sharp1=true;
          }
          defn=defn+1;
        }
        else{
          retbuf[bufn]=deftable[n].mdefinition[defn];
          bufn=bufn+1;
          defn=defn+1;
        }
      }
    }
    retbuf[bufn]='\0';
  }
  return retbuf;
}




//マクロ名の探索
//返り値はマクロ名のあった添字
public int searchdef(char[] macro){
  int i=0;
  for(i=0;i<depth;i=i+1){
    if(strCmp(deftable[i].name,macro)==0){
      return i;
    }
  }
  return -1;    //マクロ名なし
}

public int makemacro(char[] macro,int narg){
  if(searchdef(macro)!=-1){
    //マクロ名重複エラー処理
    return -1;
  }
  deftable[depth]=malloc(sizeof(definition));
  deftable[depth].name=macro;
  deftable[depth].narg=narg;
  deftable[depth].pattern=null;
  deftable[depth].mdefinition=null;
  depth=depth+1;
  return 0;
}

public int deletedef(char[] macro){
  int n=searchdef(macro);
  if(n!=-1){
    free(deftable[n]);
    int i=0;
    depth=depth-1;
    for(i=n;i<depth;i=i+1){
      deftable[i]=deftable[i+1];
    }
  }

  return 0;
}

public int makelist(char[] macro,int argn,int nchar){
  int n=0;        //マクロ名のある深さ
  reflist sublist;  //臨時リスト
  n=searchdef(macro); //マクロ名の探索

  if(n==-1) //マクロ名がなかった
    return -1;

  //リストの作成が初めての時
  if(deftable[n].pattern==null){
    deftable[n].pattern=malloc(sizeof(reflist));
    sublist=deftable[n].pattern;
  }

  //リストが既にあるかどうか
  else{
    sublist=deftable[n].pattern;
    //リストがあるならリストの終わりまで移動
    while(true){
      if(sublist.next==null){
        sublist.next=malloc(sizeof(reflist));
        sublist=sublist.next;
        break;
      }
      sublist=sublist.next;
    }
  }

  //リストの登録
  sublist.nchar=nchar;
  sublist.argn=argn;
  sublist.next=null;

  return 0;
}



public int makedef(char[] macro,char[] def){
  int n=0;    //マクロ名の深さ
  n=searchdef(macro); //マクロ名の探索

  //マクロ名がないなら
  if(n==-1)
    return -1;

  deftable[n].mdefinition=def;  //定義本体の登録
  return  0;
}
